unit CtFunction;

interface

uses Windows, Messages, SysUtils, Classes, vcl.Dialogs, vcl.Graphics,
  vcl.Forms, ZendTypes, PHPTypes, PHPLoader, HZendTypes, Variants, rtti,
  WideStrUtils;

type
  TPHPRequestType = (prtGet, prtPost);

type
  TPHPEngine = class(TComponent, IUnknown)
  private
  protected
  public
    delphi_sapi_module: sapi_module_struct;
    PHPINIPath: AnsiString;
    TSRMLS_D: pppointer;
    FLibraryModule: Tzend_module_entry;
    ZendFunction: TArray<zend_function_entry>;
    RegNumFunc: Cardinal;
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
    procedure StartupEngine; virtual;
    procedure DefineFunction(Name: PAnsiChar; CallBackFunc: pointer);
  published
  end;

  TpsvCustomPHP = class(TComponent)
  private
    FBuffer: TMemoryStream;
    FVirtualStream: TMemoryStream;
    FPostStream: TMemoryStream;
    FRequestType: TPHPRequestType;
  protected
    ActiveMode: boolean;
  public
    TSRMLS_D: pointer;
    FTerminated: boolean;
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
    function Execute: AnsiString; overload;
    function RunCode(ACode: AnsiString): AnsiString; overload;
    procedure StartupRequest;
    procedure ShutdownRequest;
    property RequestType: TPHPRequestType read FRequestType write FRequestType
      default prtGet;
  end;

var
  PEngineCt: TpsvCustomPHP;
procedure ZAIniE2(n, v: PAnsiChar);
function TEngineCt(): TpsvCustomPHP;

implementation

function TEngineCt(): TpsvCustomPHP;
begin
  if PEngineCt = nil then
    PEngineCt := TpsvCustomPHP.Create(nil);
  Result := PEngineCt;
end;

procedure ZAIniE2(n, v: PAnsiChar);
begin
  zend_alter_ini_entry(n, Length(n), v, Length(v), ZEND_INI_SYSTEM,
    ZEND_INI_STAGE_RUNTIME);
end;

function php_delphi_send_header(p1, TSRMLS_DC: pointer): integer; cdecl;
begin
  // Result := _SAPI_HEADER_SENT_SUCCESSFULLY;
end;

function delphi_stream_reader(handle: pointer; buf: PAnsiChar; len: size_t;
  TSRMLS_DC: pointer): size_t; cdecl;
var
  f: TMemoryStream;
begin
  Result := 0;
  f := TMemoryStream(handle);
  if f <> nil then
    try
      Result := f.Read(buf^, len);
    except
      Result := 0;
    end;
end;

function delphi_stream_fsizer(handle: pointer; TSRMLS_DC: pointer)
  : size_t; cdecl;
var
  f: TMemoryStream;
begin
  Result := 0;

  f := TMemoryStream(handle);
  if f <> nil then
    try
      Result := f.Size;
    except
      Result := 0;
    end
end;

procedure delphi_stream_closer(handle: pointer; TSRMLS_DC: pointer); cdecl;
var
  f: TMemoryStream;
begin
  f := TMemoryStream(handle);
  if f <> nil then
    try
      f.Clear;
    except
    end;
end;

constructor TpsvCustomPHP.Create(AOwner: TComponent);
begin
  inherited;
  FBuffer := TMemoryStream.Create;
  FVirtualStream := TMemoryStream.Create;
  ActiveMode := false;
  FTerminated := false;
  PEngineCt := nil;
end;

destructor TpsvCustomPHP.Destroy;
begin
  FBuffer.Destroy;
  if FVirtualStream <> nil then
    FreeAndNil(FVirtualStream);
  ActiveMode := false;
  FRequestType := prtGet;
  inherited;
end;

procedure TpsvCustomPHP.StartupRequest;
var
  gl: psapi_globals_struct;
  TimeStr: string;
begin
  if ActiveMode then
    Exit;

  TSRMLS_D := ts_resource_ex(0, nil);
  gl := GetSAPIGlobals;

  try
    if Assigned(FPostStream) then
      FPostStream.Clear
    else
      FPostStream := TMemoryStream.Create;

    FPostStream.Position := 0;

    ZAIniE2('max_execution_time', '0');

    php_request_startup(TSRMLS_D);
    gl^.server_context := Self;
    ActiveMode := true;
  except
    ActiveMode := false;
  end;
end;

procedure TpsvCustomPHP.ShutdownRequest;
var
  gl: psapi_globals_struct;
begin
  if not ActiveMode then
    Exit;
  try
    if not FTerminated then
    begin
      try
        php_request_shutdown(nil);
      except
      end;
      gl := GetSAPIGlobals;
      gl^.server_context := nil;

    end;
  finally
    ActiveMode := false;
  end;
end;

function TpsvCustomPHP.Execute: AnsiString;
var
  file_handle: zend_file_handle;
  ZendStream: _zend_stream;
  gl: psapi_globals_struct;
begin
  Result := '';
  try
    FBuffer.Clear;
    TSRMLS_D := ts_resource_ex(0, nil);
    StartupRequest;

    ZeroMemory(@file_handle, sizeof(zend_file_handle));
    ZeroMemory(@ZendStream, sizeof(ZendStream));

    ZendStream.reader := delphi_stream_reader;
    ZendStream.closer := delphi_stream_closer;
    ZendStream.fsizer := delphi_stream_fsizer;
    ZendStream.handle := FVirtualStream;

    file_handle._type := ZEND_HANDLE_STREAM;
    file_handle.opened_path := nil;
    file_handle.FileName := '-';
    file_handle.free_filename := 0;
    file_handle.handle.Stream := ZendStream;

    try
      php_execute_script(@file_handle, TSRMLS_D);
    except
      FBuffer.Clear;
    end;

    ShutdownRequest;

    FBuffer.Position := 0;
    SetLength(Result, FBuffer.Size);
    FBuffer.Read(Result[1], FBuffer.Size);
    FBuffer.Clear;
  finally

  end;
end;

function TpsvCustomPHP.RunCode(ACode: AnsiString): AnsiString;
begin
  if ACode = '' then
  begin
    Exit;
    Result := '';
  end;

  FBuffer.Clear;

  try
    FVirtualStream.Clear;
    FVirtualStream.Write(ACode[1], Length(ACode));
    FVirtualStream.Position := 0;
    Result := Execute
  except
    Result := '';
  end;
end;

procedure TPHPEngine.DefineFunction(Name: PAnsiChar; CallBackFunc: pointer);
begin
  inc(RegNumFunc);
  SetLength(ZendFunction, RegNumFunc + 1);
  ZendFunction[RegNumFunc - 1].fname := Name;
  ZendFunction[RegNumFunc - 1].handler := CallBackFunc;
end;

constructor TPHPEngine.Create(AOwner: TComponent);
begin

end;

destructor TPHPEngine.Destroy;
begin
  UnloadZEND;
  inherited;
end;

function LogMessageError(_message: PAnsiChar; TSRMLS_D: pointer): integer; cdecl;
begin
  Result := 0;
  Application.MessageBox(PWideChar(WideString(_message)), '[Ct Engine]',
    MB_ICONERROR);
end;

procedure register_server_variables(val: pzval; p: pointer); cdecl;
begin
  // php_register_variable('SERVER_NAME', 'Ctelphi', val, p);
  // php_register_variable('SERVER_SOFTWARE', 'Ctelphi', val, p);
end;

function php_delphi_ub_write(str: pointer; len: uint; p: pointer)
  : integer; cdecl;
var
  php: TpsvCustomPHP;
  gl: psapi_globals_struct;
begin
  Result := 0;
  gl := GetSAPIGlobals;
  if Assigned(gl) then
  begin
    php := TpsvCustomPHP(gl^.server_context);
    if Assigned(php) then
    begin
      try
        Result := php.FBuffer.Write(str^, len);
      except
      end;
    end;
  end;
end;

procedure TPHPEngine.StartupEngine;
begin
  if PHP5dll <> 0 then
  begin
    FLibraryModule.Size := sizeof(Tzend_module_entry);
    FLibraryModule.zend_api := ZEND_MODULE_API_NO;
    FLibraryModule.zts := 1;
    FLibraryModule.Name := 'PHP';

    FLibraryModule.build_id := StrNew(PAnsiChar(ZEND_MODULE_BUILD_ID));

    FLibraryModule.zend_debug := 0;

    FLibraryModule._type := MODULE_PERSISTENT;
    FLibraryModule.handle := nil;
    FLibraryModule.module_number := 0;

    delphi_sapi_module.Name := 'embed';
    delphi_sapi_module.pretty_name := 'PHP Engine';

    if (PHPINIPath <> '') and FileExists(PHPINIPath) then
      delphi_sapi_module.php_ini_path_override := PAnsiChar(PHPINIPath)
    else
      delphi_sapi_module.php_ini_path_override := nil;

    delphi_sapi_module.register_server_variables := @register_server_variables;
    delphi_sapi_module.log_message := @LogMessageError;
    delphi_sapi_module.sapi_error := @zend_error;
    delphi_sapi_module.send_header := @php_delphi_send_header;

    delphi_sapi_module.ub_write := @php_delphi_ub_write;

    tsrm_startup(128, 1, 0, nil);

    sapi_startup(@delphi_sapi_module);

    FLibraryModule.functions := @ZendFunction[0];
    php_module_startup(@delphi_sapi_module, @FLibraryModule, 1);

    TSRMLS_D := ts_resource_ex(0, nil);

    ZAIniE2('register_argc_argv', '0');
    ZAIniE2('html_errors', '1');
    ZAIniE2('implicit_flush', '1');
    ZAIniE2('max_input_time', '0');
  end;
end;

end.
