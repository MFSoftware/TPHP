unit TPHPFunction;

interface

uses Windows, Messages, SysUtils, Classes, Vcl.Dialogs, Vcl.Graphics,
  Vcl.Forms, ZendTypes, PHPTypes, PHPLoader, HZendTypes, Variants, Rtti,
  WideStrUtils, AnsiStrings, PHPCommons, System.UITypes;

type
  TPHPRequestType = (prtGet, prtPost);

type
  TpsvCustomPHP = class(TComponent)
  private
    FBuffer: TMemoryStream;
    FVirtualStream: TMemoryStream;
    FPostStream: TMemoryStream;
    FRequestType: TPHPRequestType;
  protected
    ActiveMode: boolean;
  public
    TSRMLS_D: pointer;
    UseDelimiters: Boolean;
    FTerminated: boolean;
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
    function Execute: AnsiString; overload;
    function RunCode(ACode: AnsiString): AnsiString; overload;
    function RunFile(AFile: AnsiString): AnsiString; overload;
    procedure StartupRequest;
    procedure ShutdownRequest;
    property RequestType: TPHPRequestType read FRequestType write FRequestType
      default prtGet;
  end;

  TPHPEngine = class(TComponent, IUnknown)
  private
  protected
  public
    delphi_sapi_module: sapi_module_struct;
    IniPath: AnsiString;
    RegisterColors: Boolean;
    TSRMLS_D: pppointer;
    FLibraryModule: Tzend_module_entry;
    ZendFunction: TArray<zend_function_entry>;
    RegNumFunc: Cardinal;
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
    procedure StartupEngine; virtual;
    procedure DefineFunction(Name: PAnsiChar; CallBackFunc: pointer);
    procedure DefineConstant(Name, Value: PAnsiChar);
  published
  end;
  
var
  PEngine: TpsvCustomPHP;

procedure ZAIniE2(n, v: PAnsiChar);
function GetPHPEngine(): TpsvCustomPHP;

implementation

const
  Colors: array[0..41] of TIdentMapEntry = (
    (Value: clBlack; Name: 'clBlack'),
    (Value: clMaroon; Name: 'clMaroon'),
    (Value: clGreen; Name: 'clGreen'),
    (Value: clOlive; Name: 'clOlive'),
    (Value: clNavy; Name: 'clNavy'),
    (Value: clPurple; Name: 'clPurple'),
    (Value: clTeal; Name: 'clTeal'),
    (Value: clGray; Name: 'clGray'),
    (Value: clSilver; Name: 'clSilver'),
    (Value: clRed; Name: 'clRed'),
    (Value: clLime; Name: 'clLime'),
    (Value: clYellow; Name: 'clYellow'),
    (Value: clBlue; Name: 'clBlue'),
    (Value: clFuchsia; Name: 'clFuchsia'),
    (Value: clAqua; Name: 'clAqua'),
    (Value: clWhite; Name: 'clWhite'),
    (Value: clScrollBar; Name: 'clScrollBar'),
    (Value: clBackground; Name: 'clBackground'),
    (Value: clActiveCaption; Name: 'clActiveCaption'),
    (Value: clInactiveCaption; Name: 'clInactiveCaption'),
    (Value: clMenu; Name: 'clMenu'),
    (Value: clWindow; Name: 'clWindow'),
    (Value: clWindowFrame; Name: 'clWindowFrame'),
    (Value: clMenuText; Name: 'clMenuText'),
    (Value: clWindowText; Name: 'clWindowText'),
    (Value: clCaptionText; Name: 'clCaptionText'),
    (Value: clActiveBorder; Name: 'clActiveBorder'),
    (Value: clInactiveBorder; Name: 'clInactiveBorder'),
    (Value: clAppWorkSpace; Name: 'clAppWorkSpace'),
    (Value: clHighlight; Name: 'clHighlight'),
    (Value: clHighlightText; Name: 'clHighlightText'),
    (Value: clBtnFace; Name: 'clBtnFace'),
    (Value: clBtnShadow; Name: 'clBtnShadow'),
    (Value: clGrayText; Name: 'clGrayText'),
    (Value: clBtnText; Name: 'clBtnText'),
    (Value: clInactiveCaptionText; Name: 'clInactiveCaptionText'),
    (Value: clBtnHighlight; Name: 'clBtnHighlight'),
    (Value: cl3DDkShadow; Name: 'cl3DDkShadow'),
    (Value: cl3DLight; Name: 'cl3DLight'),
    (Value: clInfoText; Name: 'clInfoText'),
    (Value: clInfoBk; Name: 'clInfoBk'),
    (Value: clNone; Name: 'clNone'));

procedure zend_error_cb2(AType: Integer; const AFname: PAnsiChar; const ALineNo: UINT; const AFormat: PAnsiChar; Args: va_list)cdecl;
var
  LText: string;
  LBuffer: array [0 .. 4096] of AnsiChar;
begin
  case AType of
    E_ERROR:
      LText := 'Fatal Error in ';
    E_WARNING:
      LText := 'Warning in ';
    E_CORE_ERROR:
      LText := 'Core Error in ';
    E_CORE_WARNING:
      LText := 'Core Warning in ';
    E_COMPILE_ERROR:
      LText := 'Compile Error in ';
    E_COMPILE_WARNING:
      LText := 'Compile Warning in ';
    E_USER_ERROR:
      LText := 'User Error in ';
    E_USER_WARNING:
      LText := 'User Warning in ';
    E_RECOVERABLE_ERROR:
      LText := 'Recoverable Error in ';
    E_PARSE:
      LText := 'Parse Error in ';
    E_NOTICE:
      LText := 'Notice in ';
    E_USER_NOTICE:
      LText := 'User Notice in ';
    E_STRICT:
      LText := 'Strict Error in ';
    E_CORE:
      LText := 'Core Error in ';
  else
    LText := 'Unknown Error(' + inttostr(AType) + '): ';
  end;

  wvsprintfA(LBuffer, AFormat, Args);

  LText := LText + UTF8ToAnsi(AFname) + '(' + inttostr(ALineNo) + '): ' + String(LBuffer);

  case AType of
    E_WARNING, E_CORE_WARNING, E_COMPILE_WARNING, E_USER_WARNING:
      MessageDlg(LText, mtWarning, [mbOk], 0);
    E_NOTICE, E_USER_NOTICE:
      MessageDlg(LText, mtInformation, [mbOk], 0);
  else
    begin
      MessageDlg(LText, mtError, [mbOk], 0);
      _zend_bailout(AFname, ALineNo);
    end;
  end;
end;

function GetPHPEngine(): TpsvCustomPHP;
begin
  if PEngine = nil then
    PEngine := TpsvCustomPHP.Create(nil);
  Result := PEngine;
end;

procedure ZAIniE2(n, v: PAnsiChar);
begin
  zend_alter_ini_entry(n, Length(n), v, Length(v), ZEND_INI_SYSTEM, ZEND_INI_STAGE_RUNTIME);
end;

function php_delphi_send_header(p1, TSRMLS_DC : pointer) : Integer; cdecl;
begin
  Result := SAPI_HEADER_SENT_SUCCESSFULLY;
end;

function delphi_stream_reader(handle: pointer; buf: PAnsiChar; len: size_t; TSRMLS_DC: pointer): size_t; cdecl;
var
  f: TMemoryStream;
begin
  Result := 0;
  f := TMemoryStream(handle);
  if f <> nil then
    try
      Result := f.Read(buf^, len);
    except
      Result := 0;
    end;
end;

function delphi_stream_fsizer(handle: pointer; TSRMLS_DC: pointer): size_t; cdecl;
var
  f: TMemoryStream;
begin
  Result := 0;
  f := TMemoryStream(handle);
  if f <> nil then
    try
      Result := f.Size;
    except
      Result := 0;
    end
end;

procedure delphi_stream_closer(handle: pointer; TSRMLS_DC: pointer); cdecl;
var
  f: TMemoryStream;
begin
  f := TMemoryStream(handle);
  if f <> nil then
    try
      f.Clear;
    except
    end;
end;

constructor TpsvCustomPHP.Create(AOwner: TComponent);
begin
  inherited;
  FBuffer := TMemoryStream.Create;
  FVirtualStream := TMemoryStream.Create;
  ActiveMode := false;
  FTerminated := false;
  PEngine := nil;
end;

destructor TpsvCustomPHP.Destroy;
begin
  FBuffer.Destroy;
  if FVirtualStream <> nil then
    FreeAndNil(FVirtualStream);
  ActiveMode := false;
  FRequestType := prtGet;
  inherited;
end;

procedure TpsvCustomPHP.StartupRequest;
var
  gl: psapi_globals_struct;
begin
  if ActiveMode then
    Exit;

  TSRMLS_D := ts_resource_ex(0, nil);
  gl := GetSAPIGlobals;

  try
    if Assigned(FPostStream) then
      FPostStream.Clear
    else
      FPostStream := TMemoryStream.Create;

    FPostStream.Position := 0;

    ZAIniE2('max_execution_time', '0');

    php_request_startup(TSRMLS_D);
    gl^.server_context := Self;
    ActiveMode := true;
  except
    ActiveMode := false;
  end;
end;

procedure TpsvCustomPHP.ShutdownRequest;
var
  gl: psapi_globals_struct;
begin
  if not ActiveMode then
    Exit;
  try
    if not FTerminated then
    begin
      try
        php_request_shutdown(nil);
      except
      end;
      gl := GetSAPIGlobals;
      gl^.server_context := nil;
    end;
  finally
    ActiveMode := false;
  end;
end;

function TpsvCustomPHP.Execute: AnsiString;
var
  file_handle: zend_file_handle;
  ZendStream: _zend_stream;
begin
  Result := '';
  try
    FBuffer.Clear;
    TSRMLS_D := ts_resource_ex(0, nil);
    StartupRequest;

    ZeroMemory(@file_handle, sizeof(zend_file_handle));
    ZeroMemory(@ZendStream, sizeof(ZendStream));

    ZendStream.reader := delphi_stream_reader;
    ZendStream.closer := delphi_stream_closer;
    ZendStream.fsizer := delphi_stream_fsizer;
    ZendStream.handle := FVirtualStream;

    file_handle._type := ZEND_HANDLE_STREAM;
    file_handle.opened_path := nil;
    file_handle.FileName := '-';
    file_handle.free_filename := 0;
    file_handle.handle.Stream := ZendStream;

    try
      php_execute_script(@file_handle, TSRMLS_D);
    except
      FBuffer.Clear;
    end;

    ShutdownRequest;

    FBuffer.Position := 0;
    SetLength(Result, FBuffer.Size);
    FBuffer.Read(Result[1], FBuffer.Size);
    FBuffer.Clear;
  finally

  end;
end;

function TpsvCustomPHP.RunCode(ACode: AnsiString): AnsiString;
begin
  if ACode = '' then
  begin
    Exit;
    Result := '';
  end;

  if UseDelimiters and (Pos('<?', String(ACode)) = 0) then
    ACode := AnsiString(Format('<? %s ?>', [ACode]));

  FBuffer.Clear;

  try
    FVirtualStream.Clear;
    FVirtualStream.Write(ACode[1], Length(ACode));
    FVirtualStream.Position := 0;
    Result := Execute
  except
    Result := '';
  end;
end;

function TpsvCustomPHP.RunFile(AFile: AnsiString): AnsiString;
var
  Stream: TMemoryStream;
  ACode: AnsiString;
begin
  if AFile = '' then
  begin
    Exit;
    Result := '';
  end;

  FBuffer.Clear;

  Stream := TMemoryStream.Create;
  try
    Stream.LoadFromFile(String(AFile));
    Stream.Position := 0;
    SetLength(ACode, Stream.Size);
    Stream.ReadBuffer(Pointer(ACode)^, Stream.Size);
  finally
    Stream.Free;
  end;

  try
    FVirtualStream.Clear;
    FVirtualStream.Write(ACode[1], Length(ACode));
    FVirtualStream.Position := 0;
    Result := Execute
  except
    Result := '';
  end;
end;

procedure TPHPEngine.DefineFunction(Name: PAnsiChar; CallBackFunc: Pointer);
begin
  Inc(RegNumFunc);
  SetLength(ZendFunction, RegNumFunc + 1);
  ZendFunction[RegNumFunc - 1].fname := Name;
  ZendFunction[RegNumFunc - 1].handler := CallBackFunc;
end;

procedure TPHPEngine.DefineConstant(Name, Value: PAnsiChar);
begin
  zend_register_string_constant(Name, AnsiStrings.StrLen(Name) + 1, Value, CONST_PERSISTENT or CONST_CS, 0, TSRMLS_D);
end;

constructor TPHPEngine.Create(AOwner: TComponent);
begin

end;

destructor TPHPEngine.Destroy;
begin
  UnloadZEND;
  inherited;
end;

function LogMessageError(_message: PAnsiChar; TSRMLS_D: pointer): Integer; cdecl;
begin
  Result := 0;
  MessageBox(Application.Handle, PWideChar(WideString(_message)), '[TPHP Engine]', MB_ICONERROR);
end;

procedure register_server_variables(val: pzval; p: pointer); cdecl;
begin
  php_register_variable('SERVER_NAME', 'Ctelphi', val, p);
  php_register_variable('SERVER_SOFTWARE', 'Ctelphi', val, p);
  //php_register_variable('REMOTE_ADDR', PAnsiChar(GetLocalIP()), val, p);
  //php_register_variable('IP_ADDRESS', PAnsiChar(GetLocalIP()), val, p);
end;

function php_delphi_ub_write(str: pointer; len: uint; p: pointer): integer; cdecl;
var
  php: TpsvCustomPHP;
  gl: psapi_globals_struct;
begin
  Result := 0;
  gl := GetSAPIGlobals;
  if Assigned(gl) then
  begin
    php := TpsvCustomPHP(gl^.server_context);
    if Assigned(php) then
      Result := php.FBuffer.Write(str^, len);
  end;
end;

procedure TPHPEngine.StartupEngine;
var
  i: Integer;
  ColorName: AnsiString;
begin
  if RegisterColors then
  begin
    for I := Low(Colors) to High(Colors) do
    begin
      ColorName := AnsiString(Colors[i].Name);
      zend_register_long_constant( PAnsiChar(ColorName), AnsiStrings.strlen(PAnsiChar(ColorName)) + 1, Colors[i].Value, CONST_PERSISTENT or CONST_CS, 0, ts_resource_ex(0, nil));
    end;
  end;

  if True then

  
  if PHP5dll <> 0 then
  begin
    FLibraryModule.Size := SizeOf(Tzend_module_entry);
    FLibraryModule.zend_api := ZEND_MODULE_API_NO;
    FLibraryModule.zts := 1;
    FLibraryModule.Name := 'TPHP';

    FLibraryModule.build_id := AnsiStrings.StrNew(PAnsiChar(ZEND_MODULE_BUILD_ID));

    FLibraryModule.zend_debug := 0;

    FLibraryModule._type := MODULE_PERSISTENT;
    FLibraryModule.handle := nil;
    FLibraryModule.module_number := 0;

    delphi_sapi_module.Name := 'embed';
    delphi_sapi_module.pretty_name := 'TPHP Engine';

    if (IniPath <> '') and FileExists(String(IniPath)) then
      delphi_sapi_module.php_ini_path_override := PAnsiChar(IniPath)
    else
      delphi_sapi_module.php_ini_path_override := nil;

    delphi_sapi_module.register_server_variables := @register_server_variables;
    delphi_sapi_module.log_message := @LogMessageError;
    delphi_sapi_module.sapi_error := @zend_error;
    delphi_sapi_module.send_header := @php_delphi_send_header;

    delphi_sapi_module.ub_write := @php_delphi_ub_write;

    tsrm_startup(128, 1, 0, nil);

    sapi_startup(@delphi_sapi_module);

    FLibraryModule.functions := @ZendFunction[0];
    php_module_startup(@delphi_sapi_module, @FLibraryModule, 1);

    TSRMLS_D := ts_resource_ex(0, nil);

    ZAIniE2('register_argc_argv', '0');
    ZAIniE2('html_errors', '1');
    ZAIniE2('implicit_flush', '1');
    ZAIniE2('max_input_time', '0');
  end;
end;

end.
