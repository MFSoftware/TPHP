unit RttiProcedures;

interface

uses
  Vcl.Forms, Vcl.Controls,
  System.SysUtils,
  Vcl.Dialogs,
  TypInfo,
  Rtti,
  DelphiFunctions,
  AZendApi,
  ZendApi,
  PHPApi,
  HZendTypes,
  ZendTypes,
  Classes;

procedure gui_propget(ht: Integer; return_value: pzval;
  return_value_ptr: ppzval; this_ptr: pzval; return_value_used: Integer;
  TSRMLS_DC: pointer); cdecl;

procedure gui_propSet(ht: Integer; return_value: pzval;
  return_value_ptr: ppzval; this_ptr: pzval; return_value_used: Integer;
  TSRMLS_DC: pointer); cdecl;

procedure gui_propExists(ht: Integer; return_value: pzval;
  return_value_ptr: ppzval; this_ptr: pzval; return_value_used: Integer;
  TSRMLS_DC: pointer); cdecl;

procedure gui_methodsList(ht: Integer; return_value: pzval;
  return_value_ptr: ppzval; this_ptr: pzval; return_value_used: Integer;
  TSRMLS_DC: pointer); cdecl;

procedure gui_methodExists(ht: Integer; return_value: pzval;
  return_value_ptr: ppzval; this_ptr: pzval; return_value_used: Integer;
  TSRMLS_DC: pointer); cdecl;

procedure gui_propList(ht: Integer; return_value: pzval;
  return_value_ptr: ppzval; this_ptr: pzval; return_value_used: Integer;
  TSRMLS_DC: pointer); cdecl;

procedure class_propGet(ht: Integer; return_value: pzval;
  return_value_ptr: ppzval; this_ptr: pzval; return_value_used: Integer;
  TSRMLS_DC: pointer); cdecl;

procedure gui_propGetEnum(ht: Integer; return_value: pzval;
  return_value_ptr: ppzval; this_ptr: pzval; return_value_used: Integer;
  TSRMLS_DC: pointer); cdecl;

procedure gui_propSetEnum(ht: Integer; return_value: pzval;
  return_value_ptr: ppzval; this_ptr: pzval; return_value_used: Integer;
  TSRMLS_DC: pointer); cdecl;

procedure gui_setObjectEvent(ht: Integer; return_value: pzval;
  return_value_ptr: ppzval; this_ptr: pzval; return_value_used: Integer;
  TSRMLS_DC: pointer); cdecl;

procedure gui_eventExists(ht: Integer; return_value: pzval;
  return_value_ptr: ppzval; this_ptr: pzval; return_value_used: Integer;
  TSRMLS_DC: pointer); cdecl;

procedure gui_findControl(ht: Integer; return_value: pzval;
  return_value_ptr: ppzval; this_ptr: pzval; return_value_used: Integer;
  TSRMLS_DC: pointer); cdecl;

procedure gui_propType(ht: Integer; return_value: pzval;
  return_value_ptr: ppzval; this_ptr: pzval; return_value_used: Integer;
  TSRMLS_DC: pointer); cdecl;

procedure gui_methodParams(ht: Integer; return_value: pzval;
  return_value_ptr: ppzval; this_ptr: pzval; return_value_used: Integer;
  TSRMLS_DC: pointer); cdecl;

implementation

function getMethodParams(classname: string; method: string): String;
var
  ctx     : TRttiContext;
  lType   : TRttiType;
  lMethod : TRttiMethod;
  b       : integer;
  x       : Rtti.TRttiParameter;
  ParamName: String;
  params: TArray<TRttiParameter>;

begin
  lType := nil;
  Result := 'void';
  ctx := TRttiContext.Create;
  b := 0;
  if( Assigned(GetClass(classname)) ) then
    lType:=ctx.GetType(GetClass(classname));
  try
    if Assigned(lType) then
      begin
       lMethod:=lType.GetMethod(method);

       if Assigned(lMethod) then
       begin
        if lMethod.IsStatic or lMethod.IsConstructor or lMethod.IsDestructor then
          begin
            Result := '!';
            Exit;
          end;
       end
       else
       begin
          params := lMethod.GetParameters;
          if not Assigned(params) then
            Exit;

          for x in params do
          begin
          if not Assigned(x) then Exit;

          if (not x.Name.IsEmpty) then
            begin
              ParamName := '$';
              if (b > 0) and (Length(params)>1) then Result := Result + ', ';
              b := b + 1;

              if pfConst in x.Flags then Result := Result + 'constant ';
              if pfArray in x.Flags then Result := Result + 'array ';
              if pfOut in x.Flags then Result := Result + '&';
              if pfAddress in x.Flags then ParamName := '&$';
              if not Assigned(x.ParamType) then Exit;

              Result := Result + x.ParamType.ToString() + ' ' + ParamName + x.Name;
            end;
          end;
      end;
      end;
  finally
    ctx.Free();
  end;
end;

procedure gui_propGetEnum;
var
  IntObj: ppzval;
  PropName: ppzval;
  Value: String;
begin
  if ZvalArgsGet(ht, @IntObj, @PropName) = SUCCESS then
    begin
      Value := GetEnumProp(TObject(AZendApi.Z_INTVAL(IntObj)), AZendApi.Z_STRVAL(PropName));
	  case DelphiFunctions.is_numeric(Value) of
      True:
        ZVAL_LONG(return_value, StrToInt(Value));
      False:
        ZVAL_STRINGW(return_value, PWideChar(WideString(Value)), False);
	  end;
  end;
end;

procedure gui_setObjectEvent;
var
  IntObj: ppzval;
  EventName: ppzval;
  FunctionHandle: ppzval;
  //Method: TMethod;
  //LProp: TRttiContext;
  //ObjClass: TClass;
begin
  if ZvalArgsGet(ht, @IntObj, @EventName, @FunctionHandle) = SUCCESS then
  begin
    //ObjClass := TObject(IntObj^.value.lval).ClassType;
    //LProp := TRttiContext.Create();
    //LProp.GetType(ObjClass).AsInstance.GetProperty('OnClick').SetValue(TObject(IntObj^.value.lval), TValue.From<TForm>(FunctionHandle^.value.lval));
  end;
end;

procedure gui_eventExists;
var
  IntObj: ppzval;
  EventName: ppzval;
begin
  if ZvalArgsGet(ht, @IntObj, @EventName) = SUCCESS then
    ZVAL_BOOL(return_value, GetMethodProp(TObject(IntObj^.value.lval), String(EventName^.value.str.val)).Code = nil);
end;

procedure gui_findControl;
var
  ClassName: ppzval;
  RContext: TRttiContext;
begin
  if ZvalArgsGet(ht, @ClassName) = SUCCESS then
    ZVAL_LONG(return_value, Integer(RContext.FindType(String(ClassName^.value.str.val))));
end;

procedure gui_propType;
var
  IntObj: ppzval;
  PropName: ppzval;
  Obj: TObject;
  PropInfo: PPropInfo;
  RContext: TRttiContext;
  RProperty: TRttiProperty;
begin
  if ZvalArgsGet(ht, @IntObj, @PropName) = SUCCESS then
  begin
    Obj := TObject(IntObj^.value.lval);
    PropInfo := GetPropInfo(Obj, String(PropName^.value.str.val));
    if PropInfo <> nil then
      ZVAL_LONG(return_value, Integer(PropInfo^.PropType^.Kind))
    else
    begin
      RContext :=  TRttiContext.Create();
      RProperty := RContext.GetType(Obj.ClassType).GetProperty(String(PropName^.value.str.val));
      if RProperty <> nil then
      begin
        if Assigned(RProperty.PropertyType) then
          ZVAL_LONG(return_value, Integer(RProperty.PropertyType.TypeKind));
        RProperty.Free;
      end;
      RContext.Free;
    end;
  end;
end;

procedure gui_propSetEnum;
var
  IntObj, PropName, Value: ppzval;
begin
  if ZvalArgsGet(ht, @IntObj, @PropName, @Value) = SUCCESS then
	begin
    case Value^._type of
      IS_LONG:
        SetEnumProp(TObject(IntObj^.value.lval), AZendApi.Z_STRVAL(PropName), IntToStr(Value^.value.lval));
			IS_STRING:
				SetEnumProp(TObject(IntObj^.value.lval), AZendApi.Z_STRVAL(PropName), String(Value^.value.str.val));
		end;
	end;
end;

procedure gui_methodParams;
var
  IntObj, MethodName: ppzval;
begin
  if ZvalArgsGet(ht, @IntObj, @MethodName) = SUCCESS then
	  ZVAL_STRINGW(return_value, getMethodParams(), False);
end;

procedure gui_propGet;
var
  IntObj: ppzval;
  PropName: ppzval;
  Value: String;
begin
  if ZvalArgsGet(ht, @IntObj, @PropName) = SUCCESS then
  begin
    Value := GetPropValue(TObject(AZendApi.Z_INTVAL(IntObj)), AZendApi.Z_STRVAL(PropName));
	  case is_numeric(Value) of
      True:
        ZVAL_LONG(return_value, StrToInt(Value));
      False:
        ZVAL_STRINGW(return_value, PWideChar(WideString(Value)), False);
	  end;
  end;
end;

procedure class_propGet;
var
  IntObj: ppzval;
  PropName: ppzval;
  Value: String;
begin
  if ZvalArgsGet(ht, @IntObj, @PropName) = SUCCESS then
    begin
      //Value := GetPropValue(TComponentClass(TPersistentClass(IntObj^.value.lval)), String(PropName^.value.str.val), True);
	  case DelphiFunctions.is_numeric(Value) of
      True:
        ZVAL_LONG(return_value, StrToInt(Value));
      False:
        ZVAL_STRINGW(return_value, PWideChar(WideString(Value)), False);
	  end;
  end;
end;

procedure gui_propSet;
var
  IntObj, PropName, Value: ppzval;
  Obj: TObject;
begin
  if ZvalArgsGet(ht, @IntObj, @PropName, @Value) = SUCCESS then
	begin
    Obj := TObject(IntObj^.value.lval);
    case Value^._type of
      IS_LONG:
      begin
        {if TObject(Value^.value.lval) <> nil then
          SetObjectProp(Obj, String(PropName^.value.str.val), TObject(Value^.value.lval))
        else     }
          SetPropValue(Obj, String(PropName^.value.str.val), Value^.value.lval);
      end;
      IS_STRING:
        SetPropValue(Obj, String(PropName^.value.str.val), String(Value^.value.str.val));
      IS_BOOL:
        SetPropValue(Obj, String(PropName^.value.str.val), zend_bool(Value^.value.lval));
    end;
	end;
end;

procedure gui_propExists;
var
  IntObj: ppzval;
  PropName: ppzval;
begin
  if ZvalArgsGet(ht, @IntObj, @PropName) = SUCCESS then
  begin
    if IsPublishedProp(TObject(IntObj^.value.lval), AZendApi.Z_STRVAL(PropName)) then
      ZVAL_TRUE(return_value)
		else
      ZVAL_FALSE(return_value);
  end;
end;

procedure gui_methodsList;
var
  Id: ppzval;
  c: TRttiContext;
  m: TRttiMethod;
  res: TStringList;
begin
  if ZvalArgsGet(ht, @Id) = SUCCESS then
  begin
    try
      c := TRttiContext.Create;
      res := TStringList.Create;
      for m in c.GetType(TObject(Id^.value.lval)).GetMethods do
        res.Add(m.Name);
      ZVAL_STRINGW(return_value, PWideChar(res.Text), False);
    finally
      c.Free;
    end;
  end;
end;

procedure gui_methodExists;
var
  RContext : TRttiContext;
  RType : TRttiType;
  RMethod : TRttiMethod;
  Id: ppzval;
  MethodName: ppzval;
begin
  if ZvalArgsGet(ht, @Id, @MethodName) = SUCCESS then
  begin
    RContext := TRttiContext.Create;
    RType:= RContext.GetType(TObject(Id^.value.lval).ClassInfo);
    try
      if Assigned(RType) then
      begin
        RMethod := RType.GetMethod(String(MethodName^.value.str.val));
        if Assigned(RMethod) then
          ZVAL_TRUE(return_value);
      end;
    finally
      if Assigned(RType) then
        RType.Free;
      RContext.Free;
    end;
  end;
end;

function getProperties(id: integer): string;
var
  inf: PPropInfo;
  lst: PPropList;
  i: integer;
  res: TStrings;
begin
  GetPropList(TObject(Integer(id)), lst);
  res := TStringList.Create;
  i := 0;
  while True do
  begin
    inf := lst^[i];
    i := i + 1;
    if inf = nil then
      break;

    res.Add(String(inf^.Name));
  end;

  Result := res.Text;
  res.Free;
end;

procedure gui_propList;
var
  Id: ppzval;
begin
  if ZvalArgsGet(ht, @Id) = SUCCESS then
    ZVAL_STRINGW(return_value, PWideChar(getProperties(Id^.value.lval)), False);
end;

end.
